#!/bin/bash

if [[ "$1" =~ --help|-h ]]; then
  echo "usage: wsstart [session-name] [directory]"
  exit 0
fi

# check if a minikube cluster is running
if ! [[ $(kubectl cluster-info) =~ (is running at) ]]; then
  echo "No k8s cluster running!"
  exit -1
fi

session=$1
echo $session
if ! [ -z $session ]; then
  namespace="$session"
else
  session=default
  read -p "enter kubernetes namespace: " -r namespace
fi

if [ -z $namespace ]; then
  namespace=default
fi

# check if this namespace exists
checkResult="$(kubectl get namespace $namespace 2>&1)"
if [[ checkResult =~ (Error)|(NotFound) ]]; then
  kubectl create namespace "$namespace"
fi

kubectl config set-context --current --namespace=$namespace

homedir=$2
if [ -z $homedir ]; then
  homedir="./"
fi

function k8s_watch_services() {
  pane=$1
  tmux send-keys -t $pane "kubectl get svc -w" C-m
}

function k8s_watch_pods() {
  pane=$1
  tmux send-keys -t $pane "kubectl get pods -w" C-m
}

function set_folder() {
  pane=$1
  tmux send-keys -t $pane "cd $homedir; clear" C-m
}

github_passw=$(pass repos/github/ssh/vivo_20240212_ed25519)
docker_passw=$(pass registries/dockerhub/tokens/build)

# Check if the session exists, discarding output
# We can check $? for the exit status (zero for success, non-zero for failure)
tmux has-session -t $session 2>/dev/null
if [ $? != 0 ]; then
  tmux new-session -d -s $session -e DOCKERPW=$docker_passw -e GITPW=$github_passw -c $homedir
  tmux rename-window -t $session:0 "dev"
  tmux new-window -t $session:1 -n "build"
  set_folder $session:1

  tmux new-window -t $session:2 -n "test"
  set_folder $session:2

  tmux new-window -t $session:3 -n "k8s"
  set_folder $session:3
  tmux split-window -t $session:3
  tmux split-window -t $session:3.0 -h
  set_folder $session:3.0
  k8s_watch_pods $session:3.0
  set_folder $session:3.1
  k8s_watch_services $session:3.1
  set_folder $session:3.2
  tmux select-pane -t $session:3.2
fi
tmux attach-session -t $session:0
